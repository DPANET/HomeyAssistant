{"version":3,"file":"span.js","sourceRoot":"","sources":["../src/span.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAEtC,MAAM,CAAC,IAAM,kBAAkB,GAAG,2DAA2D,CAAC;AAE9F;;GAEG;AACH;IACE,cACmB,QAA0B,EAC1B,OAAuC,EACvC,SAA0B,EAC1B,OAAc;QAHd,yBAAA,EAAA,WAAmB,KAAK,EAAE;QAC1B,wBAAA,EAAA,UAAkB,KAAK,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC;QACvC,0BAAA,EAAA,iBAA0B;QAF1B,aAAQ,GAAR,QAAQ,CAAkB;QAC1B,YAAO,GAAP,OAAO,CAAgC;QACvC,cAAS,GAAT,SAAS,CAAiB;QAC1B,YAAO,GAAP,OAAO,CAAO;IAC9B,CAAC;IAEJ;;;OAGG;IACW,oBAAe,GAA7B,UAA8B,WAAmB;QAC/C,IAAM,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtD,IAAI,OAAO,EAAE;YACX,IAAM,QAAM,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YACpF,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,QAAM,CAAC,CAAC;SAC3D;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACI,4BAAa,GAApB;QACE,OAAO,QAAM,IAAI,CAAC,QAAQ,SAAI,IAAI,CAAC,OAAO,UAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAE,CAAC;IAC/E,CAAC;IAED;;OAEG;IACI,qBAAM,GAAb;QACE,OAAO;YACL,MAAM,EAAE,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,SAAS;YAC5D,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC;IACJ,CAAC;IACH,WAAC;AAAD,CAAC,AAtCD,IAsCC","sourcesContent":["import { Span as SpanInterface } from '@sentry/types';\nimport { uuid4 } from '@sentry/utils';\n\nexport const TRACEPARENT_REGEXP = /([0-9a-f]{2})-([0-9a-f]{32})-([0-9a-f]{16})-([0-9a-f]{2})/;\n\n/**\n * Span containg all data about a span\n */\nexport class Span implements SpanInterface {\n  public constructor(\n    private readonly _traceId: string = uuid4(),\n    private readonly _spanId: string = uuid4().substring(16),\n    private readonly _recorded: boolean = false,\n    private readonly _parent?: Span,\n  ) {}\n\n  /**\n   * Continues a trace\n   * @param traceparent Traceparent string\n   */\n  public static fromTraceparent(traceparent: string): Span | undefined {\n    const matches = traceparent.match(TRACEPARENT_REGEXP);\n    if (matches) {\n      const parent = new Span(matches[2], matches[3], matches[4] === '01' ? true : false);\n      return new Span(matches[2], undefined, undefined, parent);\n    }\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    return `00-${this._traceId}-${this._spanId}-${this._recorded ? '01' : '00'}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): object {\n    return {\n      parent: (this._parent && this._parent.toJSON()) || undefined,\n      span_id: this._spanId,\n      trace_id: this._traceId,\n    };\n  }\n}\n"]}